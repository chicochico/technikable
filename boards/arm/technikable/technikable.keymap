/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// #define QWERTY_BASE 1

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3


// Readability keycodes
#define LOW_ENT &lt LOWER ENTER
#define RAI_ENT &lt RAISE ENTER
#define LOW_SPC &lt LOWER SPACE
#define RAI_SPC &lt RAISE SPACE
#define LSFT_LB &mt LSHFT LBKT
#define RSFT_RB &mt RSHFT RBKT
#define CTL_SPC &mt LCTRL SPACE


// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt {
    quick_tap_ms = <200>;
    tapping_term_ms = <140>;
};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <LOWER RAISE>;
	    then-layer = <ADJUST>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "base";
            bindings = <
 &kp ESC   &kp Q    &kp W     &kp E     &kp R    &kp T    &kp Y    &kp U    &kp I      &kp O      &kp P       &kp BKSP
 &kp TAB   &kp A    &kp S     &kp D     &kp F    &kp G    &kp H    &kp J    &kp K      &kp L      &kp SEMI    &kp QUOT
 LSFT_LB   &kp Z    &kp X     &kp C     &kp V    &kp B    &kp N    &kp M    &kp COMMA  &kp DOT    &kp FSLH    RSFT_RB
#ifdef TBLE_DUAL_2U
                    &kp LALT  &kp RGUI        LOW_SPC      RAI_SPC          &kp RALT   &kp RCTRL
#elif defined(TBLE_MIT)
                    &kp LALT  &kp RGUI  LOW_ENT      CTL_SPC       RAI_ENT  &kp RALT   &kp RCTRL
#else
                    &kp LALT  &kp RGUI  LOW_ENT  CTL_SPC  CTL_SPC  RAI_ENT  &kp RALT   &kp RCTRL
#endif
            >;
        };

        lower_layer {
            label = "lower";
            bindings = <
&trans     &trans     &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP   &trans          &trans       &trans     &trans         &trans      &kp UNDER     &kp KP_PLUS     &trans
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &kp LARW       &kp DARW    &kp UARW   &kp RARW   &trans
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &trans
#ifdef TBLE_DUAL_2U
                      &trans     &trans              &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
                      &trans     &trans      &trans                &trans             &trans      &trans   &trans
#else
                      &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans
#endif


/*     _______, _______, KC_MUTE, KC_VOLD, KC_VOLU, _______, _______, _______, _______, KC_UNDS, KC_PLUS, _______, */
/*     KC_TILD, KC_EXLM, KC_AT,   KC_HASH, KC_DLR,  KC_PERC, KC_CIRC, KC_AMPR, KC_ASTR, KC_LPRN, KC_RPRN, KC_PIPE, */
/*     _______, _______, KC_MPLY, KC_MPRV, KC_MNXT, _______, _______, _______, _______, _______, _______, _______, */
/*     SCR_SHT, _______, _______, _______, _______, _______, _______, _______, KC_LEFT, KC_DOWN, KC_UP,   KC_RIGHT */
            >;
        };

        raise_layer {
            label = "raise";
            bindings = <
&trans     &kp LBKT   &kp N7     &kp N8      &kp N9    &kp RBKT    &kp C_PREV    &trans         &trans       &trans       &trans     &trans
&trans     &kp MINUS  &kp N4     &kp N5      &kp N6    &kp EQUAL   &kp C_NEXT    &trans         &trans       &trans       &trans     &trans
&trans     &kp GRAVE  &kp N1     &kp N2      &kp N3    &kp BSLH    &trans        &trans         &trans       &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
                     &trans     &kp N0              &trans                 &trans            &trans         &trans
#elif defined(TBLE_MIT)
                     &trans     &kp N0      &trans           &none            &kp ESC        &kp DEL      &trans
#else
                     &trans     &kp N0      &trans    &none         &none     &kp ESC        &kp DEL      &trans
#endif
            >;
        };

        adjust_layer {
            label = "adjust";
            bindings = <
&bt BT_CLR     &kp LBRC   &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp RBRC     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp COLON  &kp LS(N4) &kp LS(N5)  &kp LS(N6)   &kp PLUS     &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)       &bt BT(4)     &trans
&trans     &kp TILDE  &kp LS(N1) &kp LS(N2)  &kp LS(N3)   &kp LS(BSLH) &trans     &trans    &trans       &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
                      &trans     &kp LS(N0)              &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
                      &trans     &kp LS(N0)      &trans                &trans             &trans      &trans   &trans
#else
                      &trans     &kp LS(N0)      &trans          &trans       &trans    &trans  &trans         &trans
#endif
            >;
        };

    };
};
