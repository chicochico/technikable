/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// #define QWERTY_BASE 1

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3


// Readability keycodes
#define LOW_ENT &lt LOWER ENTER
#define RAI_ENT &lt RAISE ENTER
#define LOW_SPC &lt LOWER SPACE
#define RAI_SPC &lt RAISE SPACE
#define LSFT_LB &mt LSHFT LBKT
#define RSFT_RB &mt RSHFT RBKT
#define CTL_SPC &mt LCTRL SPACE


// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt {
    quick_tap_ms = <200>;
    tapping_term_ms = <140>;
};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <LOWER RAISE>;
	    then-layer = <ADJUST>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "base";
            bindings = <
 &kp ESC      &kp Q        &kp W        &kp E        &kp R        &kp T        &kp Y        &kp U        &kp I        &kp O        &kp P        &kp BKSP
 &kp TAB      &kp A        &kp S        &kp D        &kp F        &kp G        &kp H        &kp J        &kp K        &kp L        &kp SEMI     &kp QUOT
 LSFT_LB      &kp Z        &kp X        &kp C        &kp V        &kp B        &kp N        &kp M        &kp COMMA    &kp DOT      &kp FSLH     RSFT_RB
#ifdef TBLE_DUAL_2U
                           &kp LALT     &kp RGUI          LOW_SPC                   RAI_SPC              &kp RALT     &kp RCTRL
#elif defined(TBLE_MIT)
                           &kp LALT     &kp RGUI     LOW_ENT           CTL_SPC      RAI_ENT              &kp RALT     &kp RCTRL
#else
                           &kp LALT     &kp RGUI     LOW_ENT      CTL_SPC      CTL_SPC      RAI_ENT      &kp RALT     &kp RCTRL
#endif
            >;
        };

        lower_layer {
            label = "lower";
            bindings = <
&trans        &trans       &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP &trans       &trans       &trans       &trans       &kp UNDER    &kp KP_PLUS  &trans
&kp TILDE     &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT    &kp CARET    &kp AMPS     &kp ASTRK    &kp LPAR     &kp RPAR     &PIPE
&trans        &trans       &kp C_PP     &kp C_PREV   &kp C_NEXT   &trans       &trans       &kp LARW     &kp DARW     &kp UARW     &kp RARW     &trans
#ifdef TBLE_DUAL_2U
                           &trans       &trans            &trans                    &trans               &trans       &trans
#elif defined(TBLE_MIT)
                           &trans       &trans       &trans            &trans               &trans       &trans       &trans
#else
                           &trans       &trans       &trans       &trans       &trans       &trans       &trans       &trans
#endif
            >;
        };

        raise_layer {
            label = "raise";
            bindings = <
&trans        &trans       &trans       &trans       &trans       &trans       &trans       &trans       &trans       &kp KP_MINUS &kp KP_EQUAL &trans
&GRAVE        &kp KP_N1    &kp KP_N2    &kp KP_N3    &kp KP_N4    &kp KP_N5    &kp KP_N6    &kp KP_N7    &kp KP_N8    &kp KP_N9    &kp KP_N0    &kp KP_SLASH
&trans        &kp GRAVE    &kp N1       &kp N2       &kp N3       &kp BSLH     &trans       &trans       &trans       &trans       &trans       &trans
#ifdef TBLE_DUAL_2U
                           &trans       &trans            &trans                    &trans               &trans       &trans
#elif defined(TBLE_MIT)
                           &trans       &trans       &trans            &trans               &trans       &trans       &trans
#else
                           &trans       &trans       &trans       &trans       &trans       &trans       &trans       &trans
#endif
            >;
        };

        adjust_layer {
            label = "adjust";
            bindings = <
&kp F1        &kp F2       &kp F3       &kp F4       &kp F5       &kp F6       &kp F7       &kp F8       &kp F9       &kp F10      &kp F11      &kp F12
&trans        &trans       &trans       &trans       &trans       &trans       &bt BT(0)    &bt BT(1)    &bt BT(2)    &bt BT(3)    &bt BT(4)    &bt BT_CLR
&trans        &trans       &trans       &trans       &trans       &trans       &trans       &trans       &trans       &trans       &trans       &trans
#ifdef TBLE_DUAL_2U
                           &trans       &trans            &trans                    &trans               &trans       &trans
#elif defined(TBLE_MIT)
                           &trans       &trans       &trans            &trans               &trans       &trans       &trans
#else
                           &trans       &trans       &trans       &trans       &trans       &trans       &trans       &trans
#endif
            >;
        };

    };
};
